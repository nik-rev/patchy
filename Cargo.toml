[package]
name = "patchy-bin"
version = "1.2.7"
edition = "2021"
license = "MIT"
readme = "README.md"
keywords = ["git", "github", "fork", "patchy"]
categories = ["development-tools", "command-line-utilities"]
authors = ["Nikita Revenco"]
description = "A tool which makes it easy to declaratively manage personal forks by automatically merging pull requests"
repository = "https://github.com/nik-rev/patchy"
homepage = "https://github.com/nik-rev/patchy"

[lints.clippy]
# enable all lints (other than restriction: https://rust-lang.github.io/rust-clippy/master/index.html?groups=restriction#blanket_clippy_restriction_lints), then selectively disable
pedantic = { priority = -1, level = "warn" }
nursery = { priority = -1, level = "warn" }
cargo = { priority = -1, level = "warn" }

# conflicts with self_named_module_files
mod_module_files = "allow"
# it's normal to have 1 char lifetime names
single_char_lifetime_names = "allow"
# having 1 char identifiers is okay in some cases,
# such as when the identifier has a short lifetime
# for instance when in a closure
min_ident_chars = "allow"
# unnecesserily makes code more verbose, especially within closures
implicit_return = "allow"
# shadowing is fine
shadow_unrelated = "allow"
# makes source code harder to read.
# Even stuff like exclamation marks would have to be used with ascii literals
non_ascii_literal = "allow"
# process::exit can be useful
exit = "allow"
# since you can just use _ = $expr to bypass this lint, it's pointless
let_underscore_untyped = "allow"
# sometimes it's useful to ignore #[must_use]
let_underscore_must_use = "allow"
# we don't want to always #[inline]
missing_inline_in_public_items = "allow"
# ? operator is very useful
question_mark_used = "allow"
# sometimes it can be more readable not to inline format!() args
uninlined_format_args = "allow"
# we don't want to mark everything with #[must_use]
must_use_candidate = "allow"
# if we mark functions with "const", we're limiting what changes
# we can make to the function without breaking the "const" contract
# we may not always want to do that
missing_const_for_fn = "allow"
# we can have items in modules which repeat the module's name, it's fine
module_name_repetitions = "allow"
# we're not a crate: we don't want to mark all structs with #[non_exhaustive]
exhaustive_structs = "allow"
# we're not a crate: documenting all errors is not necessary
missing_errors_doc = "allow"
# placing an arbitrary limit on how many lines we can have is unnecessary
too_many_lines = "allow"
# it can't detect if the code has a condition to stop the iterator
maybe_infinite_iter = "allow"

# === Restrictions ===

absolute_paths = "warn"
deref_by_slicing = "warn"
wildcard_enum_match_arm = "warn"
verbose_file_reads = "warn"

# == safety ==
# Each 'unsafe' block should always contain exactly 1 unsafe operation
# with clear documentation why the invariants are upheld.

undocumented_unsafe_blocks = "forbid"
unnecessary_safety_comment = "forbid"
unnecessary_safety_doc = "forbid"
multiple_unsafe_ops_per_block = "forbid"

# == correctness ==
# Program may behave unexpectedly

create_dir = "deny"
filetype_is_file = "deny"
# may cause memory leaks
mem_forget = "deny"

# == performance ==

# .to_string() is problematic because it does through the whole Display pipeline
str_to_string = "warn"
non_zero_suggestions = "warn"
mutex_atomic = "warn"
rc_mutex = "warn"
rc_buffer = "warn"
# prefer using pattern matching
string_lit_chars_any = "warn"
missing_asserts_for_indexing = "warn"

# == readabilty ==

unseparated_literal_suffix = "warn"
unneeded_field_pattern = "warn"
unnecessary_self_imports = "warn"
try_err = "warn"
map_with_unused_argument_over_ranges = "warn"
# better be explicit with .clone()
string_to_string = "warn"
# no need to be extra verbose, and makes code easier to modify as well
redundant_type_annotations = "warn"
# having multiple layout styles can be confusing
self_named_module_files = "warn"
# having an explicit, even if just containing a comment,
# "else" branch improves readability
else_if_without_else = "warn"
# explicit annotation of ! for functions that never return
# due to having infinite loops
infinite_loop = "warn"
semicolon_outside_block = "warn"
tests_outside_test_module = "warn"
allow_attributes = "warn"
allow_attributes_without_reason = "warn"
needless_raw_strings = "warn"
mixed_read_write_in_expression = "warn"
missing_assert_message = "warn"
get_unwrap = "warn"
if_then_some_else_none = "warn"
impl_trait_in_params = "warn"

[[bin]]
name = "patchy"
path = "src/main.rs"

[lib]
name = "patchy"

[package.metadata.wix]
upgrade-guid = "5868B076-2779-431F-9B51-0B12B052711C"
path-guid = "17921C69-1BA1-422E-BCFC-0F5C960BEDF0"
license = false
eula = false

[dependencies]
anyhow = "1.0"
serde = { version = "1.0", features = ["derive"] }
toml = "0.8"
tokio = { version = "1.42", features = ["full"] }
reqwest = { version = "0.12", default-features = false, features = [
  "blocking",
  "json",
  "rustls-tls",
] }
serde_json = "1.0"
tempfile = "3.14"
rand = "0.8"
colored = "2.2"
dialoguer = "0.11"
futures = "0.3"
indexmap = "2.7"
once_cell = "1.17"

# The profile that 'dist' will build with
[profile.dist]
inherits = "release"
codegen-units = 1
lto = "fat"
