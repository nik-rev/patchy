[package]
name = "patchy-bin"
version = "1.3.0"
edition = "2024"
license = "MIT OR Apache-2.0"
readme = "README.md"
keywords = ["git", "github", "fork", "patchy"]
categories = ["development-tools", "command-line-utilities"]
authors = ["Nikita Revenco"]
description = "A tool which makes it easy to declaratively manage personal forks by automatically merging pull requests"
repository = "https://github.com/nik-rev/patchy"
homepage = "https://github.com/nik-rev/patchy"

[[bin]]
name = "patchy"
path = "src/main.rs"

[lib]
name = "patchy"

[package.metadata.wix]
upgrade-guid = "5868B076-2779-431F-9B51-0B12B052711C"
path-guid = "17921C69-1BA1-422E-BCFC-0F5C960BEDF0"
license = false
eula = false

[dependencies]
anyhow = "1.0"
serde = { version = "1.0", features = ["derive"] }
toml = "0.8"
tokio = { version = "1.42", features = ["full"] }
reqwest = { version = "0.12", default-features = false, features = [
  "blocking",
  "json",
  "rustls-tls",
] }
serde_json = "1.0"
tempfile = "3.14"
rand = "0.8"
colored = "2.2"
indexmap = { version = "2.7", features = ["serde"] }
once_cell = "1.17"
documented = "0.9"
log = "0.4"
env_logger = "0.11"
nutype = "0.6"
clap = { version = "4.5.39", features = [
  "derive",
  "wrap_help",
  "unstable-markdown",
] }
tap = "1.0.1"
dialoguer = "0.11.0"
clap_complete_command = { version="0.6.1", features = ["nushell", "fig", "carapace"] }
clap-verbosity-flag = "3.0.3"

[dev-dependencies]
pretty_assertions = "1.4"
assert_cmd = "2.0.16"
copy_dir = "0.1.3"
predicates = "3.1.3"

# The profile that 'dist' will build with
[profile.dist]
inherits = "release"
codegen-units = 1
lto = "fat"

# ============================
# 
#            Lints
# 
# ============================

[lints.rust]
redundant_imports = "warn"
# Documentation for all public items
missing_docs = "warn"
# `foo::bar::baz` => `bar::baz` if `bar` is in scope
unused_qualifications = "warn"
# detects rules of macros that weren't used
unused_macro_rules = "warn"
# lints against e.g. undefinedd meta variables
meta_variable_misuse = "warn"
# all types must `#[derive(Copy)]`
missing_copy_implementations = "warn"
# all types must `#[derive(Debug)]`
missing_debug_implementations = "warn"

[lints.clippy]
pedantic = { priority = -1, level = "warn" }

# --- allowed lints
# 
# `$a * $b + $c` is slower and less precise than `$a.mul_add($b, $c)`
# but it is more readable, the gain in speed / precision
# will be negligible in most situations
suboptimal_flops = "allow"
# arbitrary limit imposes unnecessary
# restriction and can make code harder to follow
too_many_lines = "allow"
# if we need it const, make it const.
# no need to make everything that can be const, const
missing_const_for_fn = "allow"
# ---

# --- more consistent ways of writing code
# 
# `if $a { Some($b) } else { None }` => `$a.then(|| $b)`
if_then_some_else_none = "warn"
# `use Trait` => `use Trait as _`
unused_trait_names = "warn"
# `foo.rs` => `foo/mod.rs`
self_named_module_files = "warn"
# omit `test_` prefix in tests: `fn test_foo` => `fn foo`
redundant_test_prefix = "warn"
# `123832i64` => `123832_i64`
unseparated_literal_suffix = "warn"
# `Foo { a: _, b: 0, .. }` => `Foo { b: 0, .. }`
unneeded_field_pattern = "warn"
# ---

# --- explain more things
# 
# `#[allow]` => `#[allow, reason = "why"]`
allow_attributes_without_reason = "warn"
# `.unwrap()` => `.expect("why")`
unwrap_used = "warn"
# `assert!(...)` => `assert!(..., "why")`
missing_assert_message = "warn"
# documentation for everything
missing_docs_in_private_items = "warn"
# `path_buf.push("foo")` => `... = PathBuf::new().join("foo")`
pathbuf_init_then_push = "warn"
# mark return type as `!` for infinite loop fns
infinite_loop = "warn"
# ---

# --- catch debug remnants
#
dbg_macro = "warn"
todo = "warn"
use_debug = "warn"
unimplemented = "warn"
print_stdout = "warn" # > explicitly `#[allow]` functions to print
print_stderr = "warn" # >
# ---

# `create_dir(...)` => `create_dir_all(...)`
# usually, failing when dir already exists is
# not what we want
create_dir = "warn"
# `fs::read_to_string` requires much less steps than `File::read_to_string`
verbose_file_reads = "warn"
# new variants added by libraries become errors
# instead of being silently ignored
wildcard_enum_match_arm = "warn"
# `use std::io::{self}` => `use std::io`
unnecessary_self_imports = "warn"
# do not lose type information about NonZero numbers
non_zero_suggestions = "warn"
# exit should only happen from `main`
exit = "warn"
